# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?

#  new theory.
#  if you take the prime factors, add 1 to all their exponents, and multiply them up, it's the number of divisors

import math

def prime(n):
  if (n % 2 == 0) & (n != 2):
    return False
  for i in xrange(3, n/2):
    if n%i==0:
      return False
  return True

def primeFac(n):
  r = [];
  while n > 1:
    for i in xrange(2, int(math.sqrt(n))+1):
      if n%i==0:
        if prime(i):
          r.append(i)
          n=n/i
          if prime(n):
            r.append(n)
            return r
  return r
  
def divisors(n):
  listPrimes = primeFac(n)
  listPrimes.sort()
  result = 1
  while listPrimes:
    num = listPrimes.pop(0)
    count = listPrimes.count(num)
    result = result * (count+2)
    listPrimes = listPrimes[count:]
  return result
    
# generate triangle numbers
num = 3
i = 2
fib = 0
while fib < 500:
  i += 1
  num += i
  fib = divisors(num)

print num